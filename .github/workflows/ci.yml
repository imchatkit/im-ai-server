name: CI/CD Pipeline

on:
  push:
    branches: [ dev,main, master ]
  # pull_request:
  #   branches: [ dev,main, master ]

env:
  DOCKER_REGISTRY: useccr.ccs.tencentyun.com
  DOCKER_NAMESPACE: java-im-ai
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # 更加优化的Maven缓存配置
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            .m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # - name: Initialize Maven project with flatten plugin
      #   run: mvn flatten:flatten

      - name: Build with Maven
        run: mvn -B clean package -DskipTests -Pprod -Dmaven.repo.local=.m2/repository

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-files
          path: "**/target/*.jar"
          retention-days: 7

  docker-build:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: jar-files
          path: .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Tencent Cloud Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.TENCENT_REGISTRY_USERNAME }}
          password: ${{ secrets.TENCENT_REGISTRY_PASSWORD }}

      - name: Build and push im-gateway
        uses: docker/build-push-action@v5
        with:
          context: ./im-gateway
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/im-gateway:${{ github.sha }}

      - name: Build and push ruoyi-auth
        uses: docker/build-push-action@v5
        with:
          context: ./framework/ruoyi-auth
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/ruoyi-auth:${{ github.sha }}

      - name: Build and push ruoyi-system
        uses: docker/build-push-action@v5
        with:
          context: ./framework/ruoyi-modules/ruoyi-system
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/ruoyi-system:${{ github.sha }}

      - name: Build and push ruoyi-gen
        uses: docker/build-push-action@v5
        with:
          context: ./framework/ruoyi-modules/ruoyi-gen
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/ruoyi-gen:${{ github.sha }}

      - name: Build and push ruoyi-job
        uses: docker/build-push-action@v5
        with:
          context: ./framework/ruoyi-modules/ruoyi-job
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/ruoyi-job:${{ github.sha }}

      - name: Build and push ruoyi-resource
        uses: docker/build-push-action@v5
        with:
          context: ./framework/ruoyi-modules/ruoyi-resource
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/ruoyi-resource:${{ github.sha }}

      - name: Build and push im-core-server
        uses: docker/build-push-action@v5
        with:
          context: ./im-core/im-core-server
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/im-core-server:${{ github.sha }}

  deploy:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: SSH Deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sleep 2
            docker login ${{ env.DOCKER_REGISTRY }} --username=${{ secrets.TENCENT_REGISTRY_USERNAME }} --password=${{ secrets.TENCENT_REGISTRY_PASSWORD }}
            
            # 拉取最新的镜像
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/im-gateway:${{ github.sha }}
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/ruoyi-auth:${{ github.sha }}
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/ruoyi-system:${{ github.sha }}
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/ruoyi-gen:${{ github.sha }}
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/ruoyi-job:${{ github.sha }}
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/ruoyi-resource:${{ github.sha }}
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/im-core-server:${{ github.sha }}
            
            # 可以在这里添加停止旧容器、启动新容器的命令
            # 例如：docker-compose up -d 或 kubectl apply -f k8s-deployment.yaml

      - name: Manual approval
        uses: trstringer/manual-approval@v2
        with:
          secret: ${{ github.token }}
          approvers: your-github-username
          minimum-approvals: 1
          exclude-authors: github-actions[bot]
